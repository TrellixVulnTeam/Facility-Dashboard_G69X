{"ast":null,"code":"import _toConsumableArray from\"/Users/tylertierney/Documents/GitHub/Facility-Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/tylertierney/Documents/GitHub/Facility-Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef,useEffect}from\"react\";import PageHeader from\"../PageHeader/PageHeader\";import data from\"../data\";import\"./dashboard.css\";import GridView from\"../GridView/GridView\";import ListView from\"../ListView/ListView\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Dashboard=function Dashboard(_ref){var navbarHeight=_ref.navbarHeight;var _useState=useState(\"feed\"),_useState2=_slicedToArray(_useState,2),viewPreference=_useState2[0],setViewPreference=_useState2[1];var _useState3=useState({key:\"\",direction:\"\"}),_useState4=_slicedToArray(_useState3,2),sortConfig=_useState4[0],setSortConfig=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),stickyPageHeader=_useState6[0],setStickyPageHeader=_useState6[1];var propertiesArray=_toConsumableArray(data);var propertiesArray1;if(sortConfig!==\"\"){propertiesArray1=propertiesArray.sort(function(a,b){if(a[sortConfig.key]<b[sortConfig.key]){return sortConfig.direction===\"ascending\"?-1:1;}if(a[sortConfig.key]>b[sortConfig.key]){return sortConfig.direction===\"ascending\"?1:-1;}return 0;});}var selectedView;switch(viewPreference){case\"feed\":selectedView=/*#__PURE__*/_jsx(GridView,{propertiesArray:propertiesArray1,sortConfig:sortConfig,setSortConfig:setSortConfig,gridSmallOrLarge:true});break;case\"grid\":selectedView=/*#__PURE__*/_jsx(GridView,{propertiesArray:propertiesArray1,sortConfig:sortConfig,setSortConfig:setSortConfig,gridSmallOrLarge:false});break;case\"list\":selectedView=/*#__PURE__*/_jsx(ListView,{propertiesArray:propertiesArray1,sortConfig:sortConfig,setSortConfig:setSortConfig});break;default:}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"pageHeader\",children:/*#__PURE__*/_jsx(PageHeader,{pageTitle:\"Your Dashboard\",viewPreference:viewPreference,setViewPreference:setViewPreference})}),/*#__PURE__*/_jsx(\"div\",{className:\"selectedView\",style:{marginTop:\"0.5rem\"},children:selectedView})]});};export default Dashboard;","map":{"version":3,"sources":["/Users/tylertierney/Documents/GitHub/Facility-Dashboard/src/Dashboard/Dashboard.js"],"names":["React","useState","useRef","useEffect","PageHeader","data","GridView","ListView","Dashboard","navbarHeight","viewPreference","setViewPreference","key","direction","sortConfig","setSortConfig","stickyPageHeader","setStickyPageHeader","propertiesArray","propertiesArray1","sort","a","b","selectedView","marginTop"],"mappings":"oWAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,CAAkCC,SAAlC,KAAmD,OAAnD,CACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,SAAjB,CACA,MAAO,iBAAP,CACA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,C,6IAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAsB,IAAnBC,CAAAA,YAAmB,MAAnBA,YAAmB,CACtC,cAA4CR,QAAQ,CAAC,MAAD,CAApD,wCAAOS,cAAP,eAAuBC,iBAAvB,eACA,eAAoCV,QAAQ,CAAC,CAAEW,GAAG,CAAE,EAAP,CAAWC,SAAS,CAAE,EAAtB,CAAD,CAA5C,yCAAOC,UAAP,eAAmBC,aAAnB,eACA,eAAgDd,QAAQ,CAAC,KAAD,CAAxD,yCAAOe,gBAAP,eAAyBC,mBAAzB,eAEA,GAAIC,CAAAA,eAAe,oBAAOb,IAAP,CAAnB,CACA,GAAIc,CAAAA,gBAAJ,CAEA,GAAIL,UAAU,GAAK,EAAnB,CAAuB,CACrBK,gBAAgB,CAAGD,eAAe,CAACE,IAAhB,CAAqB,SAACC,CAAD,CAAIC,CAAJ,CAAU,CAChD,GAAID,CAAC,CAACP,UAAU,CAACF,GAAZ,CAAD,CAAoBU,CAAC,CAACR,UAAU,CAACF,GAAZ,CAAzB,CAA2C,CACzC,MAAOE,CAAAA,UAAU,CAACD,SAAX,GAAyB,WAAzB,CAAuC,CAAC,CAAxC,CAA4C,CAAnD,CACD,CACD,GAAIQ,CAAC,CAACP,UAAU,CAACF,GAAZ,CAAD,CAAoBU,CAAC,CAACR,UAAU,CAACF,GAAZ,CAAzB,CAA2C,CACzC,MAAOE,CAAAA,UAAU,CAACD,SAAX,GAAyB,WAAzB,CAAuC,CAAvC,CAA2C,CAAC,CAAnD,CACD,CACD,MAAO,EAAP,CACD,CARkB,CAAnB,CASD,CAED,GAAIU,CAAAA,YAAJ,CACA,OAAQb,cAAR,EACE,IAAK,MAAL,CACEa,YAAY,cACV,KAAC,QAAD,EACE,eAAe,CAAEJ,gBADnB,CAEE,UAAU,CAAEL,UAFd,CAGE,aAAa,CAAEC,aAHjB,CAIE,gBAAgB,CAAE,IAJpB,EADF,CAQA,MACF,IAAK,MAAL,CACEQ,YAAY,cACV,KAAC,QAAD,EACE,eAAe,CAAEJ,gBADnB,CAEE,UAAU,CAAEL,UAFd,CAGE,aAAa,CAAEC,aAHjB,CAIE,gBAAgB,CAAE,KAJpB,EADF,CAQA,MACF,IAAK,MAAL,CACEQ,YAAY,cACV,KAAC,QAAD,EACE,eAAe,CAAEJ,gBADnB,CAEE,UAAU,CAAEL,UAFd,CAGE,aAAa,CAAEC,aAHjB,EADF,CAOA,MACF,QA9BF,CAiCA,mBACE,wCACE,YAAK,SAAS,CAAC,YAAf,uBACE,KAAC,UAAD,EACE,SAAS,CAAC,gBADZ,CAEE,cAAc,CAAEL,cAFlB,CAGE,iBAAiB,CAAEC,iBAHrB,EADF,EADF,cAQE,YAAK,SAAS,CAAC,cAAf,CAA8B,KAAK,CAAE,CAAEa,SAAS,CAAE,QAAb,CAArC,UACGD,YADH,EARF,GADF,CAcD,CApED,CAsEA,cAAef,CAAAA,SAAf","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport PageHeader from \"../PageHeader/PageHeader\";\nimport data from \"../data\";\nimport \"./dashboard.css\";\nimport GridView from \"../GridView/GridView\";\nimport ListView from \"../ListView/ListView\";\n\nconst Dashboard = ({ navbarHeight }) => {\n  const [viewPreference, setViewPreference] = useState(\"feed\");\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"\" });\n  const [stickyPageHeader, setStickyPageHeader] = useState(false);\n\n  let propertiesArray = [...data];\n  let propertiesArray1;\n\n  if (sortConfig !== \"\") {\n    propertiesArray1 = propertiesArray.sort((a, b) => {\n      if (a[sortConfig.key] < b[sortConfig.key]) {\n        return sortConfig.direction === \"ascending\" ? -1 : 1;\n      }\n      if (a[sortConfig.key] > b[sortConfig.key]) {\n        return sortConfig.direction === \"ascending\" ? 1 : -1;\n      }\n      return 0;\n    });\n  }\n\n  let selectedView;\n  switch (viewPreference) {\n    case \"feed\":\n      selectedView = (\n        <GridView\n          propertiesArray={propertiesArray1}\n          sortConfig={sortConfig}\n          setSortConfig={setSortConfig}\n          gridSmallOrLarge={true}\n        />\n      );\n      break;\n    case \"grid\":\n      selectedView = (\n        <GridView\n          propertiesArray={propertiesArray1}\n          sortConfig={sortConfig}\n          setSortConfig={setSortConfig}\n          gridSmallOrLarge={false}\n        />\n      );\n      break;\n    case \"list\":\n      selectedView = (\n        <ListView\n          propertiesArray={propertiesArray1}\n          sortConfig={sortConfig}\n          setSortConfig={setSortConfig}\n        />\n      );\n      break;\n    default:\n  }\n\n  return (\n    <>\n      <div className=\"pageHeader\">\n        <PageHeader\n          pageTitle=\"Your Dashboard\"\n          viewPreference={viewPreference}\n          setViewPreference={setViewPreference}\n        />\n      </div>\n      <div className=\"selectedView\" style={{ marginTop: \"0.5rem\" }}>\n        {selectedView}\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}