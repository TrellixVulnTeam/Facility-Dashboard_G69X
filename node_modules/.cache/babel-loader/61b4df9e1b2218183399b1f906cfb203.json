{"ast":null,"code":"import _slicedToArray from\"/Users/tylertierney/Documents/GitHub/Facility-Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Box,Image,Flex,Badge,Text}from\"@chakra-ui/react\";import{WarningIcon}from\"@chakra-ui/icons\";import\"./propertyCard.css\";import PropertyModal from\"../PropertyModal/PropertyModal\";import React,{useState}from\"react\";import{convertDateToString,convertSqftToString,determineBadgeColor,getStreetAddress,preventScrollOnBody}from\"../HelperFunctions\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PropertyCard=function PropertyCard(_ref){var market=_ref.market,address=_ref.address,projectstage=_ref.projectstage,whoscourt=_ref.whoscourt,projectstatusupdate=_ref.projectstatusupdate,strategicdirection=_ref.strategicdirection,size=_ref.size,expdate=_ref.expdate,featuredimg=_ref.featuredimg,gridSmallOrLarge=_ref.gridSmallOrLarge;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isModalShowing=_useState2[0],setModalShowing=_useState2[1];var sizingVariables;if(gridSmallOrLarge===true){sizingVariables={badgeFontSize:\"sm\",marketFontSize:\"sm\",addressFontSize:\"xl\",boxFontSize:\"md\",boxMaxWidth:\"300px\",actionNeededFontSize:\"sm\",imageBoxSize:\"\",warningIconSize:\"28px\"};}else{sizingVariables={badgeFontSize:\"0.5rem\",marketFontSize:\"0.55rem\",addressFontSize:\"sm\",boxFontSize:\"xs\",boxMaxWidth:\"175px\",actionNeededFontSize:\"xs\",imageBoxSize:\"150px\",warningIconSize:\"20px\"};}var actionNeeded,notificationBadge;if(whoscourt===\"Avocat Group\"){actionNeeded=/*#__PURE__*/_jsx(_Fragment,{});}else if(whoscourt===\"Inactive\"){actionNeeded=/*#__PURE__*/_jsx(Flex,{mt:2,align:\"center\",children:/*#__PURE__*/_jsxs(Text,{ml:1,fontSize:sizingVariables.actionNeededFontSize,children:[/*#__PURE__*/_jsx(\"b\",{children:\"Note:\"}),\" \",projectstatusupdate]})});}else{actionNeeded=/*#__PURE__*/_jsx(Flex,{mt:2,align:\"center\",children:/*#__PURE__*/_jsxs(Text,{ml:1,fontSize:sizingVariables.actionNeededFontSize,children:[/*#__PURE__*/_jsx(\"b\",{children:\"Action Required:\"}),\" \",projectstatusupdate]})});notificationBadge=/*#__PURE__*/_jsx(WarningIcon,{color:\"red.400\",boxSize:sizingVariables.warningIconSize,className:\"warningIcon\"});}var showModal=function showModal(){setModalShowing(true);preventScrollOnBody(\"prevent\");};return/*#__PURE__*/_jsxs(Box,{className:\"propertyCard\",p:\"5\",maxW:sizingVariables.boxMaxWidth,borderWidth:\"1px\",mb:\"30px\",onClick:function onClick(){return showModal();},fontSize:sizingVariables.boxFontSize,children:[isModalShowing?/*#__PURE__*/_jsx(PropertyModal,{isModalShowing:isModalShowing,setModalShowing:setModalShowing,market:market,address:address,projectstage:projectstage,whoscourt:whoscourt,projectstatusupdate:projectstatusupdate,strategicdirection:strategicdirection,size:size,expdate:expdate,featuredimg:featuredimg}):/*#__PURE__*/_jsx(_Fragment,{}),notificationBadge,/*#__PURE__*/_jsx(Image,{borderRadius:\"md\",src:featuredimg,objectFit:\"cover\",boxSize:sizingVariables.imageBoxSize}),/*#__PURE__*/_jsxs(Flex,{align:\"baseline\",mt:2,children:[/*#__PURE__*/_jsx(Badge,{fontSize:sizingVariables.badgeFontSize,colorScheme:determineBadgeColor(projectstage),children:projectstage}),/*#__PURE__*/_jsx(Text,{ml:2,textTransform:\"uppercase\",fontSize:sizingVariables.marketFontSize,fontWeight:\"bold\",color:\"pink.800\",children:market})]}),/*#__PURE__*/_jsx(Text,{mt:2,fontSize:sizingVariables.addressFontSize,fontWeight:\"semibold\",lineHeight:\"short\",className:\"propertyCardAddress\",children:getStreetAddress(address)}),/*#__PURE__*/_jsx(Text,{mt:2,children:convertSqftToString(size)+\" SQFT\"}),/*#__PURE__*/_jsx(\"span\",{mt:2,children:expdate?\"Exp Date: \"+convertDateToString(expdate):expdate}),actionNeeded]});};export default PropertyCard;","map":{"version":3,"sources":["/Users/tylertierney/Documents/GitHub/Facility-Dashboard/src/PropertyCard/PropertyCard.js"],"names":["Box","Image","Flex","Badge","Text","WarningIcon","PropertyModal","React","useState","convertDateToString","convertSqftToString","determineBadgeColor","getStreetAddress","preventScrollOnBody","PropertyCard","market","address","projectstage","whoscourt","projectstatusupdate","strategicdirection","size","expdate","featuredimg","gridSmallOrLarge","isModalShowing","setModalShowing","sizingVariables","badgeFontSize","marketFontSize","addressFontSize","boxFontSize","boxMaxWidth","actionNeededFontSize","imageBoxSize","warningIconSize","actionNeeded","notificationBadge","showModal"],"mappings":"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","sourcesContent":["import { Box, Image, Flex, Badge, Text } from \"@chakra-ui/react\";\nimport { WarningIcon } from \"@chakra-ui/icons\";\nimport \"./propertyCard.css\";\nimport PropertyModal from \"../PropertyModal/PropertyModal\";\nimport React, { useState } from \"react\";\nimport {\n  convertDateToString,\n  convertSqftToString,\n  determineBadgeColor,\n  getStreetAddress,\n  preventScrollOnBody,\n} from \"../HelperFunctions\";\n\nconst PropertyCard = ({\n  market,\n  address,\n  projectstage,\n  whoscourt,\n  projectstatusupdate,\n  strategicdirection,\n  size,\n  expdate,\n  featuredimg,\n  gridSmallOrLarge,\n}) => {\n  const [isModalShowing, setModalShowing] = useState(false);\n\n  let sizingVariables;\n  if (gridSmallOrLarge === true) {\n    sizingVariables = {\n      badgeFontSize: \"sm\",\n      marketFontSize: \"sm\",\n      addressFontSize: \"xl\",\n      boxFontSize: \"md\",\n      boxMaxWidth: \"300px\",\n      actionNeededFontSize: \"sm\",\n      imageBoxSize: \"\",\n      warningIconSize: \"28px\",\n    };\n  } else {\n    sizingVariables = {\n      badgeFontSize: \"0.5rem\",\n      marketFontSize: \"0.55rem\",\n      addressFontSize: \"sm\",\n      boxFontSize: \"xs\",\n      boxMaxWidth: \"175px\",\n      actionNeededFontSize: \"xs\",\n      imageBoxSize: \"150px\",\n      warningIconSize: \"20px\",\n    };\n  }\n\n  let actionNeeded, notificationBadge;\n  if (whoscourt === \"Avocat Group\") {\n    actionNeeded = <></>;\n  } else if (whoscourt === \"Inactive\") {\n    actionNeeded = (\n      <Flex mt={2} align=\"center\">\n        <Text ml={1} fontSize={sizingVariables.actionNeededFontSize}>\n          <b>Note:</b> {projectstatusupdate}\n        </Text>\n      </Flex>\n    );\n  } else {\n    actionNeeded = (\n      <Flex mt={2} align=\"center\">\n        <Text ml={1} fontSize={sizingVariables.actionNeededFontSize}>\n          <b>Action Required:</b> {projectstatusupdate}\n        </Text>\n      </Flex>\n    );\n\n    notificationBadge = (\n      <WarningIcon\n        color=\"red.400\"\n        boxSize={sizingVariables.warningIconSize}\n        className=\"warningIcon\"\n      />\n    );\n  }\n\n  const showModal = () => {\n    setModalShowing(true);\n    preventScrollOnBody(\"prevent\");\n  };\n\n  return (\n    <Box\n      className=\"propertyCard\"\n      p=\"5\"\n      maxW={sizingVariables.boxMaxWidth}\n      borderWidth=\"1px\"\n      mb=\"30px\"\n      onClick={() => showModal()}\n      fontSize={sizingVariables.boxFontSize}\n    >\n      {isModalShowing ? (\n        <PropertyModal\n          isModalShowing={isModalShowing}\n          setModalShowing={setModalShowing}\n          market={market}\n          address={address}\n          projectstage={projectstage}\n          whoscourt={whoscourt}\n          projectstatusupdate={projectstatusupdate}\n          strategicdirection={strategicdirection}\n          size={size}\n          expdate={expdate}\n          featuredimg={featuredimg}\n        />\n      ) : (\n        <></>\n      )}\n      {notificationBadge}\n      <Image\n        borderRadius=\"md\"\n        src={featuredimg}\n        objectFit=\"cover\"\n        boxSize={sizingVariables.imageBoxSize}\n      />\n      <Flex align=\"baseline\" mt={2}>\n        <Badge\n          fontSize={sizingVariables.badgeFontSize}\n          colorScheme={determineBadgeColor(projectstage)}\n        >\n          {projectstage}\n        </Badge>\n        <Text\n          ml={2}\n          textTransform=\"uppercase\"\n          fontSize={sizingVariables.marketFontSize}\n          fontWeight=\"bold\"\n          color=\"pink.800\"\n        >\n          {market}\n        </Text>\n      </Flex>\n      <Text\n        mt={2}\n        fontSize={sizingVariables.addressFontSize}\n        fontWeight=\"semibold\"\n        lineHeight=\"short\"\n        className=\"propertyCardAddress\"\n      >\n        {getStreetAddress(address)}\n      </Text>\n      <Text mt={2}>{convertSqftToString(size) + \" SQFT\"}</Text>\n      <span mt={2}>\n        {expdate ? \"Exp Date: \" + convertDateToString(expdate) : expdate}\n      </span>\n      {actionNeeded}\n    </Box>\n  );\n};\n\nexport default PropertyCard;\n"]},"metadata":{},"sourceType":"module"}