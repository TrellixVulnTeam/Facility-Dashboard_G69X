{"ast":null,"code":"export var convertDateToString=function convertDateToString(expdate){var date=new Date(expdate);var expdateString=date.getMonth()+1+\"-\"+date.getDate()+\"-\"+date.getFullYear();return expdateString;};export var convertDateToMMYYYY=function convertDateToMMYYYY(expdate){var date=new Date(expdate);var expdateString=date.getMonth()+1+\"/\"+date.getFullYear();return expdateString;};export var convertSqftToString=function convertSqftToString(size){if(size!==undefined){var size2=size.toLocaleString(\"en-US\");return size2;}};export var determineBadgeColor=function determineBadgeColor(projectstage){var badgeColor=\"blue\";switch(projectstage){case\"Negotiation\":badgeColor=\"green\";break;case\"Waiting\":badgeColor=\"pink\";break;case\"On Hold\":badgeColor=\"red\";break;case\"Closed\":badgeColor=\"red\";break;default:badgeColor=\"blue\";}return badgeColor;};export var getStreetAddress=function getStreetAddress(address){var firstComma=address.indexOf(\",\");var streetAddress=address.substr(0,firstComma);return streetAddress;};export var getCityStateZip=function getCityStateZip(address){var firstComma=address.indexOf(\",\");var cityStateZip=address.substr(firstComma+2,address.length);return cityStateZip;};export var preventScrollOnBody=function preventScrollOnBody(preventOrAllow){if(preventOrAllow===\"prevent\"){document.body.classList.add(\"preventScroll\");}else{document.body.classList.remove(\"preventScroll\");}};","map":{"version":3,"sources":["/Users/tylertierney/Documents/GitHub/Facility-Dashboard/src/HelperFunctions.js"],"names":["convertDateToString","expdate","date","Date","expdateString","getMonth","getDate","getFullYear","convertDateToMMYYYY","convertSqftToString","size","undefined","size2","toLocaleString","determineBadgeColor","projectstage","badgeColor","getStreetAddress","address","firstComma","indexOf","streetAddress","substr","getCityStateZip","cityStateZip","length","preventScrollOnBody","preventOrAllow","document","body","classList","add","remove"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,OAAD,CAAa,CAC9C,GAAIC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,IAAJ,CAASF,OAAT,CAAX,CACA,GAAIG,CAAAA,aAAa,CACfF,IAAI,CAACG,QAAL,GAAkB,CAAlB,CAAsB,GAAtB,CAA4BH,IAAI,CAACI,OAAL,EAA5B,CAA6C,GAA7C,CAAmDJ,IAAI,CAACK,WAAL,EADrD,CAEA,MAAOH,CAAAA,aAAP,CACD,CALM,CAOP,MAAO,IAAMI,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACP,OAAD,CAAa,CAC9C,GAAIC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,IAAJ,CAASF,OAAT,CAAX,CACA,GAAIG,CAAAA,aAAa,CAAGF,IAAI,CAACG,QAAL,GAAkB,CAAlB,CAAsB,GAAtB,CAA4BH,IAAI,CAACK,WAAL,EAAhD,CACA,MAAOH,CAAAA,aAAP,CACD,CAJM,CAMP,MAAO,IAAMK,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,IAAD,CAAU,CAC3C,GAAIA,IAAI,GAAKC,SAAb,CAAwB,CACtB,GAAMC,CAAAA,KAAK,CAAGF,IAAI,CAACG,cAAL,CAAoB,OAApB,CAAd,CACA,MAAOD,CAAAA,KAAP,CACD,CACF,CALM,CAOP,MAAO,IAAME,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,YAAD,CAAkB,CACnD,GAAIC,CAAAA,UAAU,CAAG,MAAjB,CACA,OAAQD,YAAR,EACE,IAAK,aAAL,CACEC,UAAU,CAAG,OAAb,CACA,MACF,IAAK,SAAL,CACEA,UAAU,CAAG,MAAb,CACA,MACF,IAAK,SAAL,CACEA,UAAU,CAAG,KAAb,CACA,MACF,IAAK,QAAL,CACEA,UAAU,CAAG,KAAb,CACA,MACF,QACEA,UAAU,CAAG,MAAb,CAdJ,CAiBA,MAAOA,CAAAA,UAAP,CACD,CApBM,CAsBP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,CAAa,CAC3C,GAAIC,CAAAA,UAAU,CAAGD,OAAO,CAACE,OAAR,CAAgB,GAAhB,CAAjB,CACA,GAAIC,CAAAA,aAAa,CAAGH,OAAO,CAACI,MAAR,CAAe,CAAf,CAAkBH,UAAlB,CAApB,CACA,MAAOE,CAAAA,aAAP,CACD,CAJM,CAMP,MAAO,IAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACL,OAAD,CAAa,CAC1C,GAAIC,CAAAA,UAAU,CAAGD,OAAO,CAACE,OAAR,CAAgB,GAAhB,CAAjB,CACA,GAAII,CAAAA,YAAY,CAAGN,OAAO,CAACI,MAAR,CAAeH,UAAU,CAAG,CAA5B,CAA+BD,OAAO,CAACO,MAAvC,CAAnB,CACA,MAAOD,CAAAA,YAAP,CACD,CAJM,CAMP,MAAO,IAAME,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,cAAD,CAAoB,CACrD,GAAIA,cAAc,GAAK,SAAvB,CAAkC,CAChCC,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,eAA5B,EACD,CAFD,IAEO,CACLH,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBE,MAAxB,CAA+B,eAA/B,EACD,CACF,CANM","sourcesContent":["export const convertDateToString = (expdate) => {\n  let date = new Date(expdate);\n  let expdateString =\n    date.getMonth() + 1 + \"-\" + date.getDate() + \"-\" + date.getFullYear();\n  return expdateString;\n};\n\nexport const convertDateToMMYYYY = (expdate) => {\n  let date = new Date(expdate);\n  let expdateString = date.getMonth() + 1 + \"/\" + date.getFullYear();\n  return expdateString;\n};\n\nexport const convertSqftToString = (size) => {\n  if (size !== undefined) {\n    const size2 = size.toLocaleString(\"en-US\");\n    return size2;\n  }\n};\n\nexport const determineBadgeColor = (projectstage) => {\n  let badgeColor = \"blue\";\n  switch (projectstage) {\n    case \"Negotiation\":\n      badgeColor = \"green\";\n      break;\n    case \"Waiting\":\n      badgeColor = \"pink\";\n      break;\n    case \"On Hold\":\n      badgeColor = \"red\";\n      break;\n    case \"Closed\":\n      badgeColor = \"red\";\n      break;\n    default:\n      badgeColor = \"blue\";\n  }\n\n  return badgeColor;\n};\n\nexport const getStreetAddress = (address) => {\n  let firstComma = address.indexOf(\",\");\n  let streetAddress = address.substr(0, firstComma);\n  return streetAddress;\n};\n\nexport const getCityStateZip = (address) => {\n  let firstComma = address.indexOf(\",\");\n  let cityStateZip = address.substr(firstComma + 2, address.length);\n  return cityStateZip;\n};\n\nexport const preventScrollOnBody = (preventOrAllow) => {\n  if (preventOrAllow === \"prevent\") {\n    document.body.classList.add(\"preventScroll\");\n  } else {\n    document.body.classList.remove(\"preventScroll\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}